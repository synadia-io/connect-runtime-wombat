# .github/workflows/release.yaml

name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'      # Only final releases (v0.1.0)
      - 'v[0-9]+.[0-9]+.[0-9]+-rc*'  # Only RCs (v0.1.0-rc8)

permissions:
  contents: write
  packages: write
  id-token: write

env:
  GOPRIVATE: github.com/synadia-io/*

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Show disk space and Go temps
        run: |
          echo "=== Disk Usage ==="
          df -h
          echo
          echo "=== Go Environment ==="
          go env GOTMPDIR
          go env GOCACHE
          echo
          echo "=== Temp Directories ==="
          echo "TMPDIR: $TMPDIR"
          echo "/tmp space:"
          df -h /tmp
          echo
          echo "=== Available Space by Mount ==="
          df -h | grep -E "(Filesystem|/dev/)"
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: 1.25.1

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup development environment
        run: |
          task setup
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Determine release info
        id: release_info
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

          # Determine if this is a prerelease
          if [[ "$TAG" == *"-rc"* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

          echo "name=Release $TAG" >> $GITHUB_OUTPUT

      - name: Run pre-release checks
        run: |
          task check
          task test

      - name: Free up disk space and setup temp dirs
        run: |
          # Cleanup
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo docker system prune -af
          # Create temp dir on larger filesystem
          sudo mkdir -p /mnt/tmp /mnt/gocache
          sudo chown $USER:$USER /mnt/tmp /mnt/gocache
          df -h

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --clean --skip=docker
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOTMPDIR: /mnt/tmp
          GOCACHE: /mnt/gocache
  docker:
    name: Build the docker image
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v5

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ vars.PRD_AWS_ECR_ADDR }}/connect-runtime-wombat
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract version info
        id: version_info
        run: |
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          echo "commit=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "build_date=$(date '+%Y-%m-%dT%H:%M:%S')" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ vars.PRD_AWS_ECR_PUSH_ROLE }}
          aws-region: ${{ vars.PRD_AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.version_info.outputs.version }}
            COMMIT_HASH=${{ steps.version_info.outputs.commit }}
            BUILD_DATE=${{ steps.version_info.outputs.build_date }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
