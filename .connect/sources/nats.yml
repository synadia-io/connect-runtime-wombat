model_version: "1"
name: nats
label: NATS
kind: source
status: stable
description: >-
  Subscribe to a NATS subject.
fields:
  - path: urls
    name: urls
    label: URLs
    type: string
    kind: list
    description: >-
      A list of URLs to connect to. If an item of the list contains commas
      it will be expanded into multiple URLs.
    examples:
      - - "nats://127.0.0.1:4222"
      - - "nats://username:password@127.0.0.1:4222"

  - path: subject
    name: subject
    label: Subject
    type: string
    description: >-
      A subject to consume from. Supports wildcards for consuming multiple
      subjects. Either a subject or stream must be specified.
    examples:
      - "foo.bar.baz"
      - "foo.*.baz"
      - "foo.bar.*"
      - "foo.>"

  - path: queue
    name: queue
    label: Queue
    type: string
    optional: true
    description: >-
      An optional queue group to consume as.

  - path: auto_replay_nacks
    name: auto_replay_nacks
    label: Auto Replay Nacks
    type: bool
    description: >-
      Whether messages that are rejected (nacked) at the output level should
      be automatically replayed indefinitely, eventually resulting in back pressure
      if the cause of the rejections is persistent. If set to `false` these messages
      will instead be deleted. Disabling auto replays can greatly improve memory efficiency
      of high throughput streams as the original shape of the data can be discarded
      immediately upon consumption and mutation.

  - path: send_ack
    name: send_ack
    label: Send Ack
    type: bool
    description: >-
      Control whether ACKS are sent as a reply to each message. When enabled,
      these replies are sent only once the data has been delivered to all outputs.

  - path: nak_delay
    name: nak_delay
    label: Nak Delay
    type: string
    optional: true
    description: >-
      An optional delay duration on redelivering a message when negatively
      acknowledged.
    examples:
      - "1m"

  - path: prefetch_count
    name: prefetch_count
    label: Prefetch Count
    type: int
    description: >-
      The maximum number of messages to pull at a time.

  - path: tls
    name: tls
    label: TLS
    type: object
    description: >-
      Custom TLS settings can be used to override system defaults.
    fields:
      - path: tls.enabled
        name: enabled
        label: Enabled
        type: bool
        description: >-
          Whether custom TLS settings are enabled.
      - path: tls.skip_cert_verify
        name: skip_cert_verify
        label: Skip Cert Verify
        type: bool
        description: >-
          Whether to skip server side certificate verification.
      - path: tls.enable_renegotiation
        name: enable_renegotiation
        label: Enable Renegotiation
        type: bool
        description: >-
          Whether to allow the remote server to repeatedly request renegotiation.
          Enable this option if you''re seeing the error message `local error: tls: no renegotiation`.
      - path: tls.root_cas
        name: root_cas
        label: Root CAS
        type: string
        optional: true
        description: >-
          An optional root certificate authority to use. This is a string,
          representing a certificate chain from the parent trusted root certificate, to
          possible intermediate signing certificates, to the host certificate.
        examples:
          - |-
            -----BEGIN CERTIFICATE-----
            ...
            -----END CERTIFICATE-----
      - path: tls.root_cas_file
        name: root_cas_file
        label: Root CAS File
        type: string
        optional: true
        description: >-
          An optional path of a root certificate authority file to use. This
          is a file, often with a .pem extension, containing a certificate chain from
          the parent trusted root certificate, to possible intermediate signing certificates,
          to the host certificate.
        examples:
          - "./root_cas.pem"
      - path: tls.client_certs
        name: client_certs
        label: Client Certs
        type: object
        description: >-
          A list of client certificates to use. For each certificate either
          the fields `cert` and `key`, or `cert_file` and `key_file` should be specified,
          but not both.
        examples:
          - - cert: foo
              key: bar
          - - cert_file: "./example.pem"
              key_file: "./example.key"
        fields:
          - path: tls.client_certs.cert
            name: cert
            label: Cert
            type: string
            description: >-
              A plain text certificate to use.
          - path: tls.client_certs.key
            name: key
            label: Key
            type: string
            description: >-
              A plain text certificate key to use.
          - path: tls.client_certs.cert_file
            name: cert_file
            label: Cert File
            type: string
            description: >-
              The path of a certificate to use.
          - path: tls.client_certs.key_file
            name: key_file
            label: Key File
            type: string
            description: >-
              The path of a certificate key to use.
          - path: tls.client_certs.password
            name: password
            label: Password
            type: string
            description: >-
              A plain text password for when the private key is password encrypted in PKCS#1 or PKCS#8 format. The obsolete `pbeWithMD5AndDES-CBC` algorithm is not supported for the PKCS#8 format.

              Because the obsolete pbeWithMD5AndDES-CBC algorithm does not authenticate the ciphertext, it is vulnerable to padding oracle attacks that can let an attacker recover the plaintext.
            examples:
              - "foo"
              - "${KEY_PASSWORD}"

  - path: auth
    name: auth
    label: Auth
    type: object
    optional: true
    description: >-
      Optional configuration of NATS authentication parameters.
    fields:
      - path: auth.nkey_file
        name: nkey_file
        label: NKey File
        type: string
        optional: true
        description: >-
          An optional file containing a NKey seed.
        examples:
          - "./seed.nk"
      - path: auth.user_credentials_file
        name: user_credentials_file
        label: User Credentials File
        type: string
        optional: true
        description: >-
          An optional file containing user credentials which consist of an
          user JWT and corresponding NKey seed.
        examples:
          - "./user.creds"
      - path: auth.user_jwt
        name: user_jwt
        label: User JWT
        type: string
        optional: true
        description: >-
          An optional plain text user JWT (given along with the corresponding
          user NKey Seed).
      - path: auth.user_nkey_seed
        name: user_nkey_seed
        label: User NKey Seed
        type: string
        optional: true
        description: >-
          An optional plain text user NKey Seed (given along with the corresponding
          user JWT).
