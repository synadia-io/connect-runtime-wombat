model_version: "1"
kind: source
label: SQL Raw
name: sql_raw
status: preview
description: |-
    Executes a select query and creates a message for each row received.

    Once the rows from the query are exhausted this input shuts down, allowing the pipeline to gracefully terminate (or the next input in a xref:components:inputs/sequence.adoc[sequence] to execute).
fields:
    - path: driver
      name: driver
      label: Driver
      kind: scalar
      type: string
      optional: false
      constraints:
        - enum:
            - mysql
            - postgres
            - clickhouse
            - mssql
            - sqlite
            - oracle
            - snowflake
            - trino
            - gocosmos
            - spanner
      description: A database driver to use.
    - path: dsn
      name: dsn
      label: DSN
      kind: scalar
      type: string
      optional: false
      description: "A Data Source Name to identify the target database."
      examples:
        - clickhouse://username:password@host1:9000,host2:9000/database?dial_timeout=200ms&max_execution_time=60
        - foouser:foopassword@tcp(localhost:3306)/foodb
        - postgres://foouser:foopass@localhost:5432/foodb?sslmode=disable
        - oracle://foouser:foopass@localhost:1521/service_name
    - path: query
      name: query
      label: Query
      kind: scalar
      type: string
      default: ""
      description: |-
        The query to execute. The style of placeholder to use depends on the driver, some drivers require question marks (`?`) whereas others expect incrementing dollar signs (`$1`, `$2`, and so on) or colons (`:1`, `:2` and so on).
      examples:
        - SELECT * FROM footable WHERE user_id = $1;
      optional: false
    - path: args_mapping
      name: args_mapping
      label: Args Mapping
      kind: scalar
      type: string
      optional: false
      default: ""
      description: An optional bloblang mapping which should evaluate to an array of values matching in size to the number of placeholder arguments in the field `query`.
      examples:
        - root = [ this.cat.meow, this.doc.woofs[0] ]
        - root = [ meta("user.id") ]
    - path: auto_replay_nacks
      name: auto_replay_nacks
      label: Auto Replay Nacks
      kind: scalar
      type: bool
      default: "true"
      optional: true
      description: Whether messages that are rejected (nacked) at the output level should be automatically replayed indefinitely, eventually resulting in back pressure if the cause of the rejections is persistent. If set to `false` these messages will instead be deleted. Disabling auto replays can greatly improve memory efficiency of high throughput streams as the original shape of the data can be discarded immediately upon consumption and mutation.
    - path: init_files
      name: init_files
      label: Init Files
      kind: list
      type: string
      description: |-
        An optional list of file paths containing SQL statements to execute immediately upon the first connection to the target database. This is a useful way to initialise tables before processing data. Glob patterns are supported, including super globs (double star).
      examples:
        - - ./init/*.sql
        - - ./foo.sql
          - ./bar.sql
      optional: false
    - path: init_statement
      name: init_statement
      label: Init Statement
      kind: scalar
      type: string
      optional: true
      default: ""
      description: |-
        An optional SQL statement to execute immediately upon the first connection to the target database. This is a useful way to initialise tables before processing data. Care should be taken to ensure that the statement is idempotent, and therefore would not cause issues when run multiple times after service restarts.

        If both `init_statement` and `init_files` are specified the `init_statement` is executed _after_ the `init_files`.

        If the statement fails for any reason a warning log will be emitted but the operation of this component will not be stopped.
      examples:
        - |-
          CREATE TABLE IF NOT EXISTS some_table (
            foo varchar(50) not null,
            bar integer,
            baz varchar(50),
            primary key (foo)
          ) WITHOUT ROWID;
    - path: conn_max_idle_time
      name: conn_max_idle_time
      label: Conn Max Idle Time
      kind: scalar
      type: string
      optional: true
      description: An optional maximum amount of time a connection may be idle. Expired connections may be closed lazily before reuse. If `value <= 0`, connections are not closed due to a connections idle time.
    - path: conn_max_life_time
      name: conn_max_life_time
      label: Conn Max Life Time
      kind: scalar
      type: string
      optional: true
      description: An optional maximum amount of time a connection may be reused. Expired connections may be closed lazily before reuse. If `value <= 0`, connections are not closed due to a connections age.
    - path: conn_max_idle
      name: conn_max_idle
      label: Conn Max Idle
      kind: scalar
      type: int
      optional: true
      default: "2"
      description: An optional maximum number of connections in the idle connection pool. If conn_max_open is greater than 0 but less than the new conn_max_idle, then the new conn_max_idle will be reduced to match the conn_max_open limit. If `value <= 0`, no idle connections are retained. The default max idle connections is currently 2. This may change in a future release.
    - path: conn_max_open
      name: conn_max_open
      label: Conn Max Open
      kind: scalar
      type: int
      optional: true
      description: An optional maximum number of open connections to the database. If conn_max_idle is greater than 0 and the new conn_max_open is less than conn_max_idle, then conn_max_idle will be reduced to match the new conn_max_open limit. If `value <= 0`, then there is no limit on the number of open connections. The default is 0 (unlimited).

