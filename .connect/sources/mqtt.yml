model_version: "1"
name: mqtt
label: MQTT
kind: source
status: preview
description: >-
  Subscribe to topics on MQTT brokers.
fields:
  - path: urls
    name: urls
    label: URLs
    type: string
    kind: list
    description: >-
      A list of URLs to connect to. The format should be `scheme://host:port` where `scheme` is one of `tcp`, `ssl`, or `ws`, `host` is the ip-address (or hostname) and `port` is the port on which the broker is accepting connections. If an item of the list contains commas it will be expanded into multiple URLs.
    examples:
      - - "tcp://localhost:1883"
        - "tcp://localhost:1884"

  - path: client_id
    name: client_id
    label: Client ID
    type: string
    default: ""
    optional: true
    description: >-
      An identifier for the client connection. If not provided a random client ID will be generated.

  - path: dynamic_client_id_suffix
    name: dynamic_client_id_suffix
    label: Client ID Suffix
    type: string
    optional: true
    description: >-
      Append a dynamically generated suffix to the specified `client_id` on each run of the pipeline. This can be useful when running multiple instances of this source.
    constraints:
      - enum:
          - "nanoid"

  - path: connect_timeout
    name: connect_timeout
    label: Connect Timeout
    type: string
    optional: true
    default: "30s"
    description: >-
      The maximum amount of time to wait in order to establish a connection before the attempt is abandoned.

  - path: user
    name: username
    label: Username
    type: string
    optional: true
    default: ""
    description: >-
      The username to authenticate with the broker.

  - path: password
    name: password
    label: Password
    type: string
    optional: true
    default: ""
    description: >-
      The password to authenticate with the broker.

  - path: keepalive
    name: keepalive
    label: Keep Alive
    type: int
    default: 30
    description: >-
      The maximum amount of time in seconds that the client will wait before sending a PINGREQ message to the broker.

  - path: will
    name: will
    label: Last Will and Testament
    type: object
    optional: true
    description: >-
      Set last will message in case of unexpected disconnection.
    fields:
      - path: will.enabled
        name: enabled
        label: Enabled
        type: bool
        default: false
        optional: true
        description: >-
          Whether to enable the last will message.

      - path: will.qos
        name: qos
        label: QoS
        type: int
        default: 0
        optional: true
        description: >-
          The QoS level to use for the last will message.
        constraints:
          - enum:
              - "0"
              - "1"
              - "2"

      - path: will.retained
        name: retained
        label: Retained
        type: bool
        default: false
        optional: true
        description: >-
          Whether the last will message should be retained.

      - path: will.topic
        name: topic
        label: Topic
        type: string
        optional: true
        description: >-
          The topic to publish the last will message to.

      - path: will.payload
        name: payload
        label: Payload
        type: string
        optional: true
        description: >-
          The payload of the last will message.

  - path: topics
    name: topics
    label: Topics
    type: string
    kind: list
    description: >-
      A list of topics to subscribe to.
    examples:
      - "my/topic"
      - "another/topic"

  - path: qos
    name: qos
    label: QoS
    type: int
    default: 1
    optional: true
    description: >-
      The level of assurance for message delivery.
    constraints:
      - enum:
          - "0"
          - "1"
          - "2"

  - path: clean_session
    name: clean_session
    label: Clean Session
    type: bool
    default: true
    optional: true
    description: >-
      Set whether the connection is non-persistent.

  - path: auto_replay_nacks
    name: auto_replay_nacks
    label: Auto Replay Nacks
    type: bool
    default: true
    optional: true
    description: >-
      Whether messages that are rejected (nacked) at the output level should be automatically replayed indefinitely, 
      eventually resulting in back pressure if the cause of the rejections is persistent. If set to `false` these 
      messages will instead be deleted. Disabling auto replays can greatly improve memory efficiency of high 
      throughput streams as the original shape of the data can be discarded immediately upon consumption and mutation.