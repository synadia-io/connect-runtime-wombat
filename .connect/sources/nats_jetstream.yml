model_version: "1"
name: nats_jetstream
label: NATS JetStream
kind: source
status: stable
description: >-
  Reads messages from NATS JetStream subjects.
fields:
  - path: urls
    name: urls
    label: URLs
    type: string
    kind: list
    description: >-
      A list of URLs to connect to. If an item of the list contains commas
      it will be expanded into multiple URLs.
    examples:
      - - "nats://127.0.0.1:4222"
      - - "nats://username:password@127.0.0.1:4222"

  - path: queue
    name: queue
    label: Queue
    type: string
    optional: true
    description: >-
      An optional queue group to consume as. Used to configure a push consumer.

  - path: subject
    name: subject
    label: Subject
    type: string
    description: >-
      A subject to consume from. Supports wildcards for consuming multiple
      subjects. Either a subject or stream must be specified.
    examples:
      - "foo.bar.baz"
      - "foo.*.baz"
      - "foo.bar.*"
      - "foo.>"

  - path: durable
    name: durable
    label: Durable
    type: string
    optional: true
    description: >-
      Preserve the state of your consumer under a durable name. Used to configure
      a pull consumer.

  - path: stream
    name: stream
    label: Stream
    type: string
    optional: true
    description: >-
      A stream to consume from. Either a subject or stream must be specified.

  - path: bind
    name: bind
    label: Bind
    type: bool
    optional: true
    default: false
    description: >-
      Indicates that the subscription should use an existing consumer.

  - path: deliver
    name: deliver
    label: Deliver
    type: string
    optional: true
    default: "all"
    description: >-
      Determines which messages to deliver when consuming without a durable subscriber.
    constraints:
      - enum:
          - "all"
          - "last"
          - "last_per_subject"
          - "new"

  - path: ack_wait
    name: ack_wait
    label: Ack Wait
    type: string
    render_hint: duration
    default: 30s
    optional: true
    description: >-
      The maximum amount of time NATS server should wait for an ack from consumer.
    examples:
      - "30s"
      - "5m"

  - path: max_ack_pending
    name: max_ack_pending
    label: Max Ack Pending
    type: int
    optional: true
    default: 1024
    description: >-
      The maximum number of outstanding acks to be allowed before consuming
      is halted.

  - path: tls
    name: tls
    label: TLS
    type: object
    optional: true
    description: >-
      Custom TLS settings can be used to override system defaults.
    fields:
      - path: tls.enabled
        name: enabled
        label: Enabled
        type: bool
        optional: true
        default: false
        description: >-
          Whether custom TLS settings are enabled.
      - path: tls.skip_cert_verify
        name: skip_cert_verify
        label: Skip Cert Verify
        type: bool
        optional: true
        description: >-
          Whether to skip server side certificate verification.
      - path: tls.enable_renegotiation
        name: enable_renegotiation
        label: Enable Renegotiation
        type: bool
        optional: true
        description: >-
          Whether to allow the remote server to repeatedly request renegotiation.
          Enable this option if you''re seeing the error message `local error: tls: no renegotiation`.
      - path: tls.root_cas
        name: root_cas
        label: Root CAS
        type: string
        optional: true
        description: >-
          An optional root certificate authority to use. This is a string,
          representing a certificate chain from the parent trusted root certificate, to
          possible intermediate signing certificates, to the host certificate.
        examples:
          - |-
            -----BEGIN CERTIFICATE-----
            ...
            -----END CERTIFICATE-----
      - path: tls.root_cas_file
        name: root_cas_file
        label: Root CAS File
        type: string
        optional: true
        description: >-
          An optional path of a root certificate authority file to use. This
          is a file, often with a .pem extension, containing a certificate chain from
          the parent trusted root certificate, to possible intermediate signing certificates,
          to the host certificate.
        examples:
          - "./root_cas.pem"
      - path: tls.client_certs
        name: client_certs
        label: Client Certs
        type: object
        optional: true
        description: >-
          A list of client certificates to use. For each certificate either
          the fields `cert` and `key`, or `cert_file` and `key_file` should be specified,
          but not both.
        examples:
          - - cert: foo
              key: bar
          - - cert_file: "./example.pem"
              key_file: "./example.key"
        fields:
          - path: tls.client_certs.cert
            name: cert
            label: Cert
            type: string
            optional: true
            description: >-
              A plain text certificate to use.
          - path: tls.client_certs.key
            name: key
            label: Key
            type: string
            optional: true
            description: >-
              A plain text certificate key to use.
          - path: tls.client_certs.cert_file
            name: cert_file
            label: Cert File
            type: string
            optional: true
            description: >-
              The path of a certificate to use.
          - path: tls.client_certs.key_file
            name: key_file
            label: Key File
            type: string
            optional: true
            description: >-
              The path of a certificate key to use.
          - path: tls.client_certs.password
            name: password
            label: Password
            type: string
            optional: true
            description: >-
              A plain text password for when the private key is password encrypted in PKCS#1 or PKCS#8 format. The obsolete `pbeWithMD5AndDES-CBC` algorithm is not supported for the PKCS#8 format.

              Because the obsolete pbeWithMD5AndDES-CBC algorithm does not authenticate the ciphertext, it is vulnerable to padding oracle attacks that can let an attacker recover the plaintext.
            examples:
              - "foo"
              - "${KEY_PASSWORD}"

  - path: auth
    name: auth
    label: Auth
    type: object
    optional: true
    description: >-
      Optional configuration of NATS authentication parameters.
    fields:
      - path: auth.nkey_file
        name: nkey_file
        label: NKey File
        type: string
        optional: true
        description: >-
          An optional file containing a NKey seed.
        examples:
          - "./seed.nk"
      - path: auth.user_credentials_file
        name: user_credentials_file
        label: User Credentials File
        type: string
        optional: true
        description: >-
          An optional file containing user credentials which consist of an
          user JWT and corresponding NKey seed.
        examples:
          - "./user.creds"
      - path: auth.user_jwt
        name: user_jwt
        label: User JWT
        type: string
        optional: true
        description: >-
          An optional plain text user JWT (given along with the corresponding
          user NKey Seed).
      - path: auth.user_nkey_seed
        name: user_nkey_seed
        label: User NKey Seed
        type: string
        optional: true
        description: >-
          An optional plain text user NKey Seed (given along with the corresponding
          user JWT).
