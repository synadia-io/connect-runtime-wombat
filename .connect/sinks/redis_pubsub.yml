model_version: '1'
label: redis_pubsub
name: redis_pubsub
status: stable
description: |-
  Publishes messages through the Redis PubSub model. It is not possible to guarantee that messages have been received.
    
    This output will interpolate functions within the channel field, you can find a list of functions xref:configuration:interpolation.adoc#bloblang-queries[here].
    
    # Performance
    
    This output benefits from sending multiple messages in flight in parallel for improved performance. You can tune the max number of in flight messages (or message batches) with the field `max_in_flight`.
    
    This output benefits from sending messages as a batch for improved performance. Batches can be formed at both the input and output level. You can find out more xref:configuration:batching.adoc[in this doc].
fields:
  - path: url
    name: url
    label: URL
    kind: scalar
    type: string
    optional: false
    examples:
      - redis://:6379
      - redis://localhost:6379
      - redis://foousername:foopassword@redisplace:6379
      - redis://:foopassword@redisplace:6379
      - redis://localhost:6379/1
      - redis://localhost:6379/1,redis://localhost:6380/1
    description: |-
      The URL of the target Redis server. Database is optional and is supplied as the URL path.
  - path: kind
    name: kind
    label: Kind
    kind: scalar
    type: string
    default: '"simple"'
    optional: true
    description: |-
      Specifies a simple, cluster-aware, or failover-aware redis client.
    constraints:
      - enum:
          - simple
          - cluster
          - failover
  - path: master
    name: master
    label: Master
    kind: scalar
    type: string
    default: '""'
    optional: true
    examples:
      - mymaster
    description: |-
      Name of the redis master when `kind` is `failover`
  - path: tls
    name: tls
    label: TLS Configuration
    type: object
    optional: false
    description: |-
      Custom TLS settings can be used to override system defaults.
    fields:
      - path: tls.enabled
        name: enabled
        label: Enabled
        type: bool
        default: 'false'
        optional: true
        description: |-
          Whether custom TLS settings are enabled.

      - path: tls.skip_cert_verify
        name: skip_cert_verify
        label: Skip Certificate Verification
        type: bool
        default: 'false'
        optional: true
        description: |-
          Whether to skip server side certificate verification.

      - path: tls.enable_renegotiation
        name: enable_renegotiation
        label: Enable Renegotiation
        type: bool
        default: 'false'
        optional: true
        description: |-
          Whether to allow the remote server to repeatedly request renegotiation. 
          Enable this option if you're seeing the error message `local error: tls: no renegotiation`.

      - path: tls.root_cas
        name: root_cas
        label: Root Certificate Authority
        type: string
        default: '""'
        optional: true
        examples:
          - '-----BEGIN CERTIFICATE-----
              ...
              -----END CERTIFICATE-----'
        secret: true
        description: |-
          An optional root certificate authority to use. 
          This is a string, representing a certificate chain from the parent trusted root certificate, 
          to possible intermediate signing certificates, to the host certificate.

      - path: tls.client_certs
        name: client_certs
        label: Client Certificates
        kind: list
        type: object
        default: '[]'
        optional: true
        examples:
          - - cert: foo
              key: bar
        description: |-
          A list of client certificates to use. 
        fields:
          - path: tls.client_certs[].cert
            name: cert
            label: Certificate
            type: string
            default: '""'
            optional: true
            description: |-
              A plain text certificate to use.

          - label: Key
            name: key
            path: tls.client_certs[].key
            type: string
            default: '""'
            optional: true
            secret: true
            description: |-
              A plain text certificate key to use.

          - path: tls.client_certs[].password
            name: password
            label: Password
            type: string
            default: '""'
            optional: true
            examples:
              - foo
              - ${KEY_PASSWORD}
            secret: true
            description: |-
              A plain text password for when the private key is password encrypted in PKCS#1 or 
              PKCS#8 format. The obsolete `pbeWithMD5AndDES-CBC` algorithm is not supported 
              for the PKCS#8 format.

              Because the obsolete pbeWithMD5AndDES-CBC algorithm does not authenticate the 
              ciphertext, it is vulnerable to padding oracle attacks that can let an attacker 
              recover the plaintext.
  
  - path: channel
    name: channel
    label: Channel
    kind: scalar
    type: string
    optional: false
    description: |-
      The channel to publish messages to.
  - path: max_in_flight
    name: max_in_flight
    label: Max In Flight
    kind: scalar
    type: int
    default: '64'
    optional: true
    description: |-
      The maximum number of messages to have in flight at a given time. Increase this to improve throughput.
  - path: batching
    name: batching
    label: Batching
    kind: scalar
    type: object
    optional: false
    examples:
      - byte_size: 5000
        count: 0
        period: 1s
      - count: 10
        period: 1s
      - check: this.contains("END BATCH")
        count: 0
        period: 1m
    description: |-
      Allows you to configure a [https://wombat.dev/pipelines/learn/batching/#batch-policy](batching policy).
    fields:
      - path: batching.count
        name: count
        label: count
        kind: scalar
        type: int
        default: '0'
        optional: true
        description: |-
          A number of messages at which the batch should be flushed. If `0` disables count based batching.
      - path: batching.byte_size
        name: byte_size
        label: byte_size
        kind: scalar
        type: int
        default: '0'
        optional: true
        description: |-
          An amount of bytes at which the batch should be flushed. If `0` disables size based batching.
      - path: batching.period
        name: period
        label: period
        kind: scalar
        type: string
        default: '""'
        optional: true
        examples:
          - 1s
          - 1m
          - 500ms
        description: |-
          A period in which an incomplete batch should be flushed regardless of its size.
      - path: batching.check
        name: check
        label: check
        kind: scalar
        type: string
        default: '""'
        optional: true
        examples:
          - this.type == "end_of_transaction"
        description: |-
          A [https://wombat.dev/pipelines/learn/interpolation/#bloblang-queries](Bloblang query) that should return a boolean value indicating whether a message should end a batch.
