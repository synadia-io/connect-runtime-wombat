version: "3"
tasks:
  build:
    desc: Build the wombat runtime
    cmds:
      - go mod tidy
      - go build -tags "{{.TAGS}}" -o ./target/connect-runtime-wombat *.go

  test:
    desc: Run all tests
    cmds:
      - go run github.com/onsi/ginkgo/v2/ginkgo -r --compilers=4

  test:nats:
    desc: Run NATS component tests (integration, benchmark, stress)
    cmds:
      - ./test/run_nats_tests.sh

  test:integration:
    desc: Run integration tests
    cmds:
      - go run github.com/onsi/ginkgo/v2/ginkgo -v ./test/integration

  test:benchmark:
    desc: Run performance benchmarks
    cmds:
      - go test -run=^$ -bench=BenchmarkSimple -benchmem ./test/benchmark -benchtime=10x

  test:benchmark:full:
    desc: Run all performance benchmarks (takes longer)
    cmds:
      - go test -run=^$ -bench=. -benchmem ./test/benchmark -benchtime=3x

  test:stress:
    desc: Run stress tests
    cmds:
      - go run github.com/onsi/ginkgo/v2/ginkgo -v ./test/stress

  test:coverage:
    desc: Run tests with coverage report
    cmds:
      - go test -coverprofile=coverage.out -covermode=atomic ./...
      - go tool cover -html=coverage.out -o coverage.html
      - echo "Coverage report generated at coverage.html"
      - 'go tool cover -func=coverage.out | grep total | awk ''{print "Total coverage: " $3}'''

  lint:
    desc: Run golangci-lint
    cmds:
      - golangci-lint run ./... --timeout=5m


  lint:install:
    desc: Install golangci-lint
    cmds:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

  fmt:
    desc: Format all Go code
    cmds:
      - go fmt ./...

  fmt:check:
    desc: Check if code is formatted
    cmds:
      - test -z "$(gofmt -l .)" || (echo "Code is not formatted. Run 'task fmt' to fix." && exit 1)

  quality:
    desc: Run all quality checks (format, lint, test)
    cmds:
      - task: fmt:check
      - task: lint
      - task: test

  quality:warn:
    desc: Run all quality checks with non-failing lint
    cmds:
      - task: fmt:check
      - cmd: golangci-lint run ./... --timeout=5m || true
        silent: false
      - task: test

  test:crawl:
    cmds:
      - nats kv add TMP > /dev/null
      - defer: nats kv del --force TMP
      - cd ../connect-node && go run ./cmd/connect-node/main.go library crawl ../connect-runtime-wombat --bucket=TMP

  validate:
    cmds:
      - curl --silent https://raw.githubusercontent.com/synadia-io/connect/refs/heads/main/model/schemas/component-spec-v1.schema.json -O
      - npx --yes ajv-cli validate -s component-spec-v1.schema.json -d ".connect/*/*.yml" --verbose

  validate_dir:
    requires: 
      vars:
        - DIR
    cmds:
      - curl --silent https://raw.githubusercontent.com/synadia-io/connect/refs/heads/main/model/schemas/component-spec-v1.schema.json -O
      - npx --yes ajv-cli validate -s component-spec-v1.schema.json -d "{{.DIR}}/*/*.yml" --verbose

  docker:local:
    cmds:
      - docker build --no-cache -t connect-runtime-wombat:local .
